!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACOS	common_fn.h	/^  ACOS, \/\/ 17$/;"	e	enum:operations
ACTG	common_fn.h	/^  ACTG, \/\/ 20$/;"	e	enum:operations
ASIN	common_fn.h	/^  ASIN, \/\/ 18$/;"	e	enum:operations
ATAN	common_fn.h	/^  ATAN, \/\/ 19$/;"	e	enum:operations
BIN	Makefile	/^BIN = bin$/;"	m
BRC	common_fn.h	/^  BRC, \/\/ 8$/;"	e	enum:operations
BRO	common_fn.h	/^  BRO, \/\/ 7$/;"	e	enum:operations
CALCULATION_ERROR	common_fn.h	17;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	sanit.mk	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g -std=c11 -lm$/;"	m
CFLAGS	sanit.mk	/^CFLAGS = -g -Werror -Wextra -Wall -std=c11$/;"	m
CHECK_FLAGS	Makefile	/^    CHECK_FLAGS = -lcheck -lm -lpthread$/;"	m
CHECK_FLAGS	Makefile	/^    CHECK_FLAGS = -lcheck -lpthread -lrt -lm -lsubunit$/;"	m
CHECK_FLAGS	sanit.mk	/^    CHECK_FLAGS = -lcheck -lm -lpthread -lrt -lsubunit$/;"	m
CHECK_FLAGS	sanit.mk	/^    CHECK_FLAGS = -lcheck -lm -lpthread$/;"	m
COS	common_fn.h	/^  COS, \/\/ 14$/;"	e	enum:operations
CTG	common_fn.h	/^  CTG, \/\/ 16$/;"	e	enum:operations
DEFAULT	parser.c	5;"	d	file:
DIGIT	parser.c	4;"	d	file:
DIV	common_fn.h	/^  DIV, \/\/ 3$/;"	e	enum:operations
DIVISION_BY_ZERO	common_fn.h	19;"	d
ERRORS	common_fn.h	22;"	d
EXEC_GCOV	sanit.mk	/^EXEC_GCOV = $(TEST_OBJS:%.o=%.out) $/;"	m
FAILURE	common_fn.h	15;"	d
FAILURE	temp/main.c	5;"	d	file:
GCOV_FLAGS	Makefile	/^GCOV_FLAGS = -fPIC -fprofile-arcs -ftest-coverage$/;"	m
GCOV_FLAGS	sanit.mk	/^GCOV_FLAGS = -fPIC -fprofile-arcs -ftest-coverage$/;"	m
INCL_LIB	Makefile	/^INCL_LIB = -L.$/;"	m
INCL_LIB	sanit.mk	/^INCL_LIB = -L.$/;"	m
LETTER	parser.c	3;"	d	file:
LEXEME	common_fn.h	27;"	d
LIB_NAME	Makefile	/^LIB_NAME = libcalc_backend.a$/;"	m
LIB_NAME	sanit.mk	/^LIB_NAME = libcalc_backend.a$/;"	m
LIB_OBJS	Makefile	/^LIB_OBJS := $(LIB_SRC:$(SOURCE_DIR)\/%.c=%.o)$/;"	m
LIB_OUT	Makefile	/^LIB_OUT = libcalc_backend.a$/;"	m
LIB_SRC	Makefile	/^LIB_SRC := $(wildcard $(SOURCE_DIR)\/*.c)$/;"	m
LN	common_fn.h	/^  LN, \/\/ 12$/;"	e	enum:operations
LOG	common_fn.h	/^  LOG, \/\/ 11$/;"	e	enum:operations
MAX_BUF	common_fn.h	11;"	d
MAX_BUF	temp/main.c	6;"	d	file:
MINUS	common_fn.h	/^  MINUS, \/\/ undefined minus \/\/ 9$/;"	e	enum:operations
MOD	common_fn.h	/^  MOD, \/\/ 4$/;"	e	enum:operations
MUL	common_fn.h	/^  MUL, \/\/ 2$/;"	e	enum:operations
NOT_A_NUMBER	common_fn.h	18;"	d
NUMBER	common_fn.h	/^  NUMBER, \/\/ 21$/;"	e	enum:operations
OFF	common_fn.h	10;"	d
ON	common_fn.h	9;"	d
PLUS	common_fn.h	/^  PLUS, \/\/ unary plus 10$/;"	e	enum:operations
POP_BINARY	notation.c	7;"	d	file:
POP_UNARY	notation.c	3;"	d	file:
POW	common_fn.h	/^  POW, \/\/ 5$/;"	e	enum:operations
SANIT_FLAGS	sanit.mk	/^SANIT_FLAGS = -fsanitize=address$/;"	m
SIN	common_fn.h	/^  SIN, \/\/ 13$/;"	e	enum:operations
SOURCE_DIR	Makefile	/^SOURCE_DIR = .$/;"	m
SQRT	common_fn.h	/^  SQRT, \/\/ 6$/;"	e	enum:operations
SRC_COMMON_FN_H_	common_fn.h	2;"	d
SRC_DIR	sanit.mk	/^SRC_DIR = .$/;"	m
SRC_OBJS	sanit.mk	/^SRC_OBJS := $(SRC_SRC:%.c=$(SRC_DIR)\/%.o)$/;"	m
SRC_SRC	sanit.mk	/^SRC_SRC := $(wildcard $(SRC_DIR)\/*.c)$/;"	m
STACK_OVERFLOW	common_fn.h	12;"	d
STACK_UNDERFLOW	common_fn.h	13;"	d
START_TEST	tests/calc_test.c	/^START_TEST(calc_1) {$/;"	f
START_TEST	tests/calc_test.c	/^START_TEST(calc_2) {$/;"	f
START_TEST	tests/calc_test.c	/^START_TEST(calc_3) {$/;"	f
START_TEST	tests/calc_test.c	/^START_TEST(calc_4) {$/;"	f
START_TEST	tests/calc_test.c	/^START_TEST(calc_5) {$/;"	f
START_TEST	tests/calc_test.c	/^START_TEST(calc_6) {$/;"	f
START_TEST	tests/temp/calc_test.c	/^START_TEST(calc_1) {$/;"	f
START_TEST	tests/temp/calc_test.c	/^START_TEST(calc_2) {$/;"	f
START_TEST	tests/temp/calc_test.c	/^START_TEST(calc_3) {$/;"	f
START_TEST	tests/temp/calc_test.c	/^START_TEST(calc_4) {$/;"	f
START_TEST	tests/temp/calc_test.c	/^START_TEST(calc_5) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_1) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_10) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_100) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_11) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_12) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_13) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_14) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_15) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_16) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_17) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_18) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_19) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_2) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_20) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_21) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_22) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_23) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_24) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_25) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_26) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_27) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_28) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_29) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_3) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_30) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_31) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_32) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_33) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_34) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_35) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_36) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_37) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_38) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_39) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_4) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_40) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_41) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_42) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_43) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_44) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_45) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_46) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_47) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_48) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_49) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_5) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_50) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_51) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_52) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_53) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_54) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_55) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_56) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_57) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_58) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_59) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_6) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_60) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_61) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_62) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_63) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_64) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_65) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_66) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_67) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_68) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_69) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_7) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_70) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_71) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_72) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_73) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_74) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_75) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_76) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_77) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_78) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_79) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_8) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_80) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_81) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_82) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_83) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_84) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_85) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_86) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_87) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_88) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_89) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_9) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_90) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_91) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_92) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_93) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_94) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_95) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_96) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_97) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_98) {$/;"	f
START_TEST	tests/temp/parser_test.c	/^START_TEST(parser_99) {$/;"	f
SUB	common_fn.h	/^  SUB, \/\/ binary minus 1$/;"	e	enum:operations
SUCCESS	common_fn.h	14;"	d
SUCCESS	temp/main.c	4;"	d	file:
SUM	common_fn.h	/^  SUM = 0,$/;"	e	enum:operations
SUM_SUB	notation.c	13;"	d	file:
TAN	common_fn.h	/^  TAN, \/\/ 15$/;"	e	enum:operations
TEST_DIR	Makefile	/^TEST_DIR = .\/tests$/;"	m
TEST_DIR	sanit.mk	/^TEST_DIR = .\/tests$/;"	m
TEST_EXEC	Makefile	/^TEST_EXEC = $(TEST_OBJS:%.o=%.out)$/;"	m
TEST_OBJS	Makefile	/^TEST_OBJS := $(TEST_SRC:$(TEST_DIR)\/%.c=%.o)$/;"	m
TEST_OBJS	sanit.mk	/^TEST_OBJS := $(TEST_SRC:$(TEST_DIR)\/%.c=%.o)$/;"	m
TEST_SRC	Makefile	/^TEST_SRC := $(wildcard $(TEST_DIR)\/*.c)$/;"	m
TEST_SRC	sanit.mk	/^TEST_SRC := $(wildcard $(TEST_DIR)\/*.c)$/;"	m
VAR	common_fn.h	/^  VAR \/\/22 variables$/;"	e	enum:operations
VAR_NOT_DEFINED	common_fn.h	20;"	d
WRONG_EXPRESSION	common_fn.h	16;"	d
calc	calc.c	/^int calc(char *expr, char *variables, double *result) {$/;"	f
check_dot	parser.c	/^int check_dot(char *sub_string) {$/;"	f
check_unary	parser.c	/^int check_unary(char *sub_string, math_fn *stack) {$/;"	f
clean_var	notation.c	/^void clean_var(char *data, double *value, int *keys) {$/;"	f
data	common_fn.h	/^  char *data;$/;"	m	struct:stack_unit
data	temp/main.c	/^  char *data;$/;"	m	struct:stack_unit	file:
ev_print_console	main.py	/^def ev_print_console(str_value):$/;"	f
ev_print_file	main.py	/^def ev_print_file(value_list):$/;"	f
fifo_out	common_fn.c	/^int fifo_out(int *queue, math_fn *stack, char *data, double *value, int *keys) {$/;"	f
free_stack	common_fn.c	/^void free_stack(math_fn *stack) {$/;"	f
free_stack	temp/main.c	/^void free_stack(math_fn *stack) {$/;"	f
input_text	common_fn.c	/^char *input_text(char *a) {$/;"	f
key_return	parser.c	/^int key_return(char *string) {$/;"	f
keys	common_fn.h	/^  int keys;$/;"	m	struct:stack_unit
keys	temp/main.c	/^  int keys;$/;"	m	struct:stack_unit	file:
letter_check	parser.c	/^int letter_check(char letter) {$/;"	f
main	temp/main.c	/^int main() {$/;"	f
main	tests/calc_test.c	/^int main() {$/;"	f
main	tests/main.c	/^int main() {$/;"	f
main	tests/temp/calc_test.c	/^int main() {$/;"	f
main	tests/temp/parser_test.c	/^int main() {$/;"	f
math_fn	common_fn.h	/^} math_fn;$/;"	t	typeref:struct:stack_com
math_fn	temp/main.c	/^} math_fn;$/;"	t	typeref:struct:stack_com	file:
operations	common_fn.h	/^enum operations {$/;"	g
output	common_fn.c	/^void output(math_fn *stack) {$/;"	f
parcer_file	main.py	/^def parcer_file():$/;"	f
parser	parser.c	/^int parser(math_fn *stack, char *string, char *x_var) {$/;"	f
pop	common_fn.c	/^int pop(math_fn *stack, char *data, double *value, int *keys) {$/;"	f
priority	notation.c	/^int priority(int operation) {$/;"	f
push	common_fn.c	/^int push(math_fn *stack, char *data, double value, int keys) {$/;"	f
push_math	notation.c	/^int push_math(math_fn *calif, int keys) {$/;"	f
push_tex	notation.c	/^int push_tex(math_fn *texas, math_fn *calif, char *data, double value, int keys) {$/;"	f
simple_pars	common_fn.c	/^char *simple_pars(const char *string, int *i) {$/;"	f
size	common_fn.h	/^  int size;$/;"	m	struct:stack_com
size	temp/main.c	/^  int size;$/;"	m	struct:stack_com	file:
sort_station	notation.c	/^int sort_station(math_fn *stack) {$/;"	f
sprintf_test	tests/calc_test.c	/^Suite *sprintf_test(void) {$/;"	f
sprintf_test	tests/temp/calc_test.c	/^Suite *sprintf_test(void) {$/;"	f
sprintf_test	tests/temp/parser_test.c	/^Suite * sprintf_test(void) {$/;"	f
stack	common_fn.h	/^  stack_t *stack;$/;"	m	struct:stack_com
stack	temp/main.c	/^  stack_t *stack;$/;"	m	struct:stack_com	file:
stack_com	common_fn.h	/^typedef struct stack_com {$/;"	s
stack_com	temp/main.c	/^typedef struct stack_com {$/;"	s	file:
stack_init	common_fn.c	/^int stack_init(math_fn *stack) {$/;"	f
stack_init	temp/main.c	/^int stack_init(math_fn *stack) {$/;"	f
stack_output	common_fn.c	/^void stack_output(math_fn *stack) {$/;"	f
stack_t	common_fn.h	/^} stack_t;$/;"	t	typeref:struct:stack_unit
stack_t	temp/main.c	/^} stack_t;$/;"	t	typeref:struct:stack_unit	file:
stack_unit	common_fn.h	/^typedef struct stack_unit {$/;"	s
stack_unit	temp/main.c	/^typedef struct stack_unit {$/;"	s	file:
value	common_fn.h	/^  double value;$/;"	m	struct:stack_unit
value	temp/main.c	/^  double value;$/;"	m	struct:stack_unit	file:
