!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACOS	common_fn.h	/^  ACOS, \/\/ 17$/;"	e	enum:operations
ACTG	common_fn.h	/^  ACTG \/\/ 20$/;"	e	enum:operations
ASIN	common_fn.h	/^  ASIN, \/\/ 18$/;"	e	enum:operations
ATAN	common_fn.h	/^  ATAN, \/\/ 19$/;"	e	enum:operations
BIN	Makefile	/^BIN = bin$/;"	m
BRC	common_fn.h	/^  BRC, \/\/ 8$/;"	e	enum:operations
BRO	common_fn.h	/^  BRO, \/\/ 7$/;"	e	enum:operations
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g -std=c11 -lm$/;"	m
CHECK_FLAGS	Makefile	/^    CHECK_FLAGS = -lcheck -lm -lpthread$/;"	m
CHECK_FLAGS	Makefile	/^    CHECK_FLAGS = -lcheck -lpthread -lrt -lm -lsubunit$/;"	m
COS	common_fn.h	/^  COS, \/\/ 14$/;"	e	enum:operations
CTG	common_fn.h	/^  CTG, \/\/ 16$/;"	e	enum:operations
DEFAULT	parser.c	12;"	d	file:
DIGIT	parser.c	11;"	d	file:
DIV	common_fn.h	/^  DIV, \/\/ 3$/;"	e	enum:operations
FAILURE	common_fn.h	12;"	d
GCOV_FLAGS	Makefile	/^GCOV_FLAGS = -fPIC -fprofile-arcs -ftest-coverage$/;"	m
INCL_LIB	Makefile	/^INCL_LIB = -L.$/;"	m
LETTER	parser.c	10;"	d	file:
LEXEME	common_fn.h	15;"	d
LIB_NAME	Makefile	/^LIB_NAME = libcalc_backend.a$/;"	m
LIB_OBJS	Makefile	/^LIB_OBJS := $(LIB_SRC:$(SOURCE_DIR)\/%.c=%.o)$/;"	m
LIB_OUT	Makefile	/^LIB_OUT = libcalc_backend.a$/;"	m
LIB_SRC	Makefile	/^LIB_SRC := $(wildcard $(SOURCE_DIR)\/*.c)$/;"	m
LN	common_fn.h	/^  LN, \/\/ 12$/;"	e	enum:operations
LOG	common_fn.h	/^  LOG, \/\/ 11$/;"	e	enum:operations
MAX_BUF	common_fn.h	8;"	d
MINUS	common_fn.h	/^  MINUS, \/\/ undefined minus \/\/ 9$/;"	e	enum:operations
MOD	common_fn.h	/^  MOD, \/\/ 4$/;"	e	enum:operations
MUL	common_fn.h	/^  MUL, \/\/ 2$/;"	e	enum:operations
PLUS	common_fn.h	/^  PLUS, \/\/ unary plus 10$/;"	e	enum:operations
POW	common_fn.h	/^  POW, \/\/ 5$/;"	e	enum:operations
SIN	common_fn.h	/^  SIN, \/\/ 13$/;"	e	enum:operations
SOURCE_DIR	Makefile	/^SOURCE_DIR = .$/;"	m
SQRT	common_fn.h	/^  SQRT, \/\/ 6$/;"	e	enum:operations
SRC_COMMON_FN_H_	common_fn.h	2;"	d
STACK_OVERFLOW	common_fn.h	9;"	d
STACK_UNDERFLOW	common_fn.h	10;"	d
START_TEST	tests/parser_test.c	/^START_TEST(parser_1) {$/;"	f
START_TEST	tests/parser_test.c	/^START_TEST(parser_2) {$/;"	f
START_TEST	tests/parser_test.c	/^START_TEST(parser_3) {$/;"	f
SUB	common_fn.h	/^  SUB, \/\/ binary minus 1$/;"	e	enum:operations
SUCCESS	common_fn.h	11;"	d
SUM	common_fn.h	/^  SUM = 0,$/;"	e	enum:operations
TAN	common_fn.h	/^  TAN, \/\/ 15$/;"	e	enum:operations
TEST_DIR	Makefile	/^TEST_DIR = .\/tests$/;"	m
TEST_EXEC	Makefile	/^TEST_EXEC = $(TEST_OBJS:%.o=%.out)$/;"	m
TEST_OBJS	Makefile	/^TEST_OBJS := $(TEST_SRC:$(TEST_DIR)\/%.c=%.o)$/;"	m
TEST_SRC	Makefile	/^TEST_SRC := $(wildcard $(TEST_DIR)\/*.c)$/;"	m
WRONG_EXPRESSION	common_fn.h	13;"	d
check_dot	parser.c	/^int check_dot(char *sub_string) {$/;"	f
data	common_fn.h	/^  char **data;$/;"	m	struct:stack_tag
free_stack	common_fn.c	/^void free_stack(stack_t *stack) {$/;"	f
init_stack	common_fn.c	/^int init_stack(stack_t *stack) {$/;"	f
input_text	common_fn.c	/^char *input_text(char *a) {$/;"	f
letter_check	parser.c	/^int letter_check(char letter) {$/;"	f
main	tests/parser_test.c	/^int main() {$/;"	f
main	tests/temp/stack.c	/^int main() {$/;"	f
mem_alloc	common_fn.c	/^char **mem_alloc(void) {$/;"	f
operations	common_fn.h	/^enum operations {$/;"	g
parser	parser.c	/^int parser(stack_t *stack, char *string) {$/;"	f
pop	common_fn.c	/^int pop(stack_t *stack, char *value) {$/;"	f
priority_op	notation.c	/^int priority_op(int operation) {$/;"	f
push	common_fn.c	/^int push(stack_t *stack, char *value) {$/;"	f
simple_pars	common_fn.c	/^char *simple_pars(const char *string, int *i) {$/;"	f
size	common_fn.h	/^  int size;$/;"	m	struct:stack_tag
sprintf_test	tests/parser_test.c	/^Suite * sprintf_test(void) {$/;"	f
stack_output	common_fn.c	/^void stack_output(stack_t *stack) {$/;"	f
stack_t	common_fn.h	/^} stack_t;$/;"	t	typeref:struct:stack_tag
stack_tag	common_fn.h	/^typedef struct stack_tag {$/;"	s
