!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FAILURE	prepare.h	9;"	d
FAILURE	stack.c	9;"	d	file:
MAX_BUF	prepare.h	5;"	d
MAX_BUF	stack.c	5;"	d	file:
STACK_OVERFLOW	prepare.h	6;"	d
STACK_OVERFLOW	stack.c	6;"	d	file:
STACK_UNDERFLOW	prepare.h	7;"	d
STACK_UNDERFLOW	stack.c	7;"	d	file:
SUCCESS	prepare.h	8;"	d
SUCCESS	stack.c	8;"	d	file:
data	prepare.h	/^  char **data;$/;"	m	struct:stack_tag
data	stack.c	/^  char **data;$/;"	m	struct:stack_tag	file:
free_stack	prepare.c	/^void free_stack(stack_t *stack) {$/;"	f
free_stack	stack.c	/^void free_stack(stack_t *stack) {$/;"	f
init_stack	prepare.c	/^int init_stack(stack_t *stack) {$/;"	f
init_stack	stack.c	/^int init_stack(stack_t *stack) {$/;"	f
input_text	prepare.c	/^char *input_text(char *a) {$/;"	f
input_text	stack.c	/^char *input_text(char *a) {$/;"	f
main	stack.c	/^int main() {$/;"	f
mem_alloc	prepare.c	/^char **mem_alloc(void) {$/;"	f
mem_alloc	stack.c	/^char **mem_alloc(void) {$/;"	f
parse_push	prepare.c	/^int parse_push(stack_t *stack, const char *string) {$/;"	f
parse_push	stack.c	/^int parse_push(stack_t *stack, const char *string) {$/;"	f
pop	prepare.c	/^int pop(stack_t *stack, char *value) {$/;"	f
pop	stack.c	/^int pop(stack_t *stack, char *value) {$/;"	f
push	prepare.c	/^int push(stack_t *stack, char *value) {$/;"	f
push	stack.c	/^int push(stack_t *stack, char *value) {$/;"	f
simple_pars	prepare.c	/^char *simple_pars(const char *string, int *i) {$/;"	f
simple_pars	stack.c	/^char *simple_pars(const char *string, int *i) {$/;"	f
size	prepare.h	/^  int size;$/;"	m	struct:stack_tag
size	stack.c	/^  int size;$/;"	m	struct:stack_tag	file:
stack_output	prepare.c	/^void stack_output(stack_t *stack) {$/;"	f
stack_output	stack.c	/^void stack_output(stack_t *stack) {$/;"	f
stack_t	prepare.h	/^} stack_t;$/;"	t	typeref:struct:stack_tag
stack_t	stack.c	/^} stack_t;$/;"	t	typeref:struct:stack_tag	file:
stack_tag	prepare.h	/^typedef struct stack_tag {$/;"	s
stack_tag	stack.c	/^typedef struct stack_tag {$/;"	s	file:
